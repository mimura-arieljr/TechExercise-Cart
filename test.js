// Generated by CodiumAI
/*
Code Analysis

Main functionalities:
The ShoppingCart class represents a shopping cart that can add items, compute the total price, apply promo discounts, check eligibility for promo discounts, show cart items, clear the cart, and show if a promo code has been applied. It takes in pricing rules as a parameter during initialization.

Methods:
- add(item, promoCode): adds an item to the cart and updates the quantity and total price of the item. If the item is "Unli2GB", it also adds a free 1GB data-pack item. Calls renderCartItems() to show the updated cart items.
- total(): calls computeTotalPrice() to compute the total price for checkout.
- items(): shows the items in the cart or a message if the cart is empty.
- renderCartItems(): shows the cart items with their quantity and total price. Calls computeTotalPrice() to show the total price.
- computeTotalPrice(): computes the total price for checkout, applies promo discounts if eligible, and applies a 10% discount if a valid promo code is entered. Calls showPromoApplied() if a promo code is applied.
- isEligibleForPromo(): checks if the cart is eligible for promo discounts based on the number of "Unli1GB" and "Unli5GB" items. Returns the discount price.
- clearCart(): clears the cart and hides the cart list. Calls renderCartItems() to show the updated cart items.
- hideCartList(): shows a message if the cart is empty or not.
- showPromoApplied(): shows a message if a promo code has been applied.

Fields:
- pricingRules: stores the pricing rules for the shopping cart.
- inputPromoCode: stores the input promo code.
- itemsInCart: stores the items in the cart as an array of objects with the item, quantity of item, and total price.
*/



describe('ShoppingCart_class', () => {

    // Tests that an item can be added to the cart
    it('test_add_item_to_cart', () => {
        const cart = new ShoppingCart();
        const item = { name: 'Unli1GB', price: 24.9 };
        cart.add(item);
        expect(itemsInCart.length).toBe(1);
        expect(itemsInCart[0].item).toEqual(item);
        expect(itemsInCart[0].quantityOfItem).toBe(1);
        expect(itemsInCart[0].totalPrice).toBe(item.price);
    });

    // Tests that multiple items can be added to the cart
    it('test_add_multiple_items_to_cart', () => {
        const cart = new ShoppingCart();
        const item1 = { name: 'Unli1GB', price: 24.9 };
        const item2 = { name: 'Unli5GB', price: 39.9 };
        cart.add(item1);
        cart.add(item2);
        expect(itemsInCart.length).toBe(2);
        expect(itemsInCart[0].item).toEqual(item1);
        expect(itemsInCart[0].quantityOfItem).toBe(1);
        expect(itemsInCart[0].totalPrice).toBe(item1.price);
        expect(itemsInCart[1].item).toEqual(item2);
        expect(itemsInCart[1].quantityOfItem).toBe(1);
        expect(itemsInCart[1].totalPrice).toBe(item2.price);
    });

    // Tests that an item with undefined name cannot be added to the cart
    it('test_add_item_with_undefined_name_to_cart', () => {
        const cart = new ShoppingCart();
        const item = { price: 24.9 };
        cart.add(item);
        expect(itemsInCart.length).toBe(0);
    });

    // Tests that an item with negative price cannot be added to the cart
    it('test_add_item_with_negative_price_to_cart', () => {
        const cart = new ShoppingCart();
        const item = { name: 'Unli1GB', price: -24.9 };
        cart.add(item);
        expect(itemsInCart.length).toBe(0);
    });

    // Tests that the total price is computed correctly with promo code discount
    it('test_compute_total_price_with_promo_code_discount', () => {
        const cart = new ShoppingCart();
        const item = { name: 'Unli1GB', price: 24.9 };
        cart.add(item, 'I<3AMAYSIM');
        expect(itemsInCart.length).toBe(1);
        expect(itemsInCart[0].item).toEqual(item);
        expect(itemsInCart[0].quantityOfItem).toBe(1);
        expect(itemsInCart[0].totalPrice).toBe(item.price);
        expect(checkOutPrice).toBeCloseTo(22.41, 2);
    });

    // Tests that the total price is computed correctly with promo code discount and other discounts
    it('test_compute_total_price_with_promo_code_discount_and_other_discounts', () => {
        const cart = new ShoppingCart();
        const item1 = { name: 'Unli1GB', price: 24.9 };
        const item2 = { name: 'Unli5GB', price: 39.9 };
        cart.add(item1);
        cart.add(item1);
        cart.add(item1);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.add(item2);
        cart.total();
        expect(checkOutPrice).toBeCloseTo(215.46, 2);
    });
});
